name: 'CICD Kubernetes Namespace Builder GitHub action'
description: 'Constructs a name for a namespace based on inputs'
author: "@cloudposse"
branding:
  icon: 'cloud'
  color: 'white'
inputs:
  flavor:
    required: false
    description: "Flavor of naming, either `pr-number`, `branch-name`, or `custom`. Note `name` must be set if using `custom`"
    default: "pr-number"
  
  app-name:
    required: false
    description: "Name of the application"
    default: ""
  
  prefix:
    required: false
    description: "Prefix for namespace"
    default: ""
  
  name:
    required: true
    description: "name for namespace if using flavor `custom`, still prefixed"
    default: ""
  
  suffix:
    required: false
    description: "Suffix for namespace, appended if still under max length (63 characters)"
    default: ""

  deny-list:
    required: false
    description: "Comma seperated list of strings to deny in the namespace name"
    default: "kube-system,kube-public,default"
  
  override-pr-number:
    required: false
    description: "Override the PR number, useful for manually helping calculate the PR number"
    
  override-branch-name:
    required: false
    description: "Override the branch name, useful for manually helping calculate the branch name"
  
outputs:
  kubernetes-namespace:
    description: "Generated kubernetes namespace"
    value: ${{ steps.output.outputs.result }}

runs:
  using: "composite"
  steps:
    - uses: cloudposse/github-action-string-transformer@main
      id: prefix
      with:
        operation: 'kebabcase'
        input-string: ${{inputs.prefix}}

    - uses: cloudposse/github-action-string-transformer@main
      id: app-name
      with:
        operation: 'kebabcase'
        input-string: ${{inputs.app-name}}

    - name: Set Name from Flavor
      id: name-from-flavor
      uses: actions/github-script@v3
      with:
        script: |
          if('${{inputs.flavor}}' === 'pr-number') {
            if('${{inputs.override-pr-number}}' !== '') {
              return 'pr-${{inputs.override-pr-number}}'
            }
            const prNumber = context.payload.number;
            return 'pr-' + prNumber
          }
          
          if('${{inputs.flavor}}' === 'branch-name') {
            if('${{inputs.override-branch-name}}' !== '') {
              return ${{inputs.override-branch-name}}
            }
            const branchName = context.payload.pull_request.head.ref.replace('refs/heads/', '');
            return branchName
          } 
          
          if('${{inputs.flavor}}' === 'custom') {
              return '${{inputs.name}}'
          }


    - uses: cloudposse/github-action-string-transformer@main
      id: name
      with:
        input-string: ${{steps.name-from-flavor.outputs.result}}
        operation: kebabcase

    - uses: cloudposse/github-action-string-transformer@main
      id: suffix
      with:
        operation: 'kebabcase'
        input-string: ${{inputs.suffix}}
        
    - name: Build Namespace
      id: build-namespace
      uses: actions/github-script@v3
      with:
        script: |
          const prefix = '${{steps.prefix.outputs.output-string}}';
          const appName = '${{steps.app-name.outputs.output-string}}';
          const name = ${{steps.name.outputs.output-string}};
          const suffix = '${{steps.suffix.outputs.output-string}}';
          const denyList = '${{inputs.deny-list}}'.split(',');
          
          let namespace = [prefix, appName, name, suffix].join('-');
          
          if(namespace.length > 63) {
              namespace = [prefix, appName, name].join('-');
              if(namespace.length > 63) {
                  namespace = [prefix, name].join('-');
              } else {
                  throw new Error('Namespace is too long from name and prefix');
              }
          }
          
          if(denyList.some((deny) => deny != '' && namespace.includes(deny))) {
              throw new Error('Namespace contains a denied string');
          }
          
          
          core.setOutput('kubernetes-namespace', namespace);
          
          console.log('Namespace Generated: ' + namespace)
          
          return namespace


    - id: output
      shell: bash
      run: |
        echo "result=${{ steps.build-namespace.outputs.result }}" >> "$GITHUB_OUTPUT"
